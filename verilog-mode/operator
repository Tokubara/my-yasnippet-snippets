# -*- mode: snippet -*-
# name: operator
# key: 
# --
+
-
* // 复杂操作
/ // 不能自动综合
% // 不能自动综合
** // power, 不能自动综合
// shift 移位运算符如果两个操作数都是 signal, a<<b, 会是非常复杂的电路
>> // 逻辑右移
<<
>>> // 算术右移
<<<

i++ // 错的, 没有
+= // 错的, 没有

// bit 位运算
~ // negate, 取反
&
|
^ // xor
^~, ~^ // 同或

&x, |, ^ // reduction

// logical, 只会返回 1 位, 它是把操作数当作逻辑值 true/false 处理, 如果全为 0, 当做 true, 否则当做 1
!
&&
||

// compare
==, != // 如果操作数存在 x/z, 直接返回 x, 返回 1/0, 综合为比较器
===, !== // 无法综合, 遇到 x/z 会继续比较, 不会返回 x, 返回 1/0

// concat
{A ,B[0], C[1]} // 综合中只需要连线
Y={4{A},2{B},C} // repeat

?: // 很常用
