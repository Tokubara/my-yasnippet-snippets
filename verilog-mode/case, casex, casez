# -*- mode: snippet -*-
# name: case, casex, casez
# key: 
# --
case ({s1, s0}) //Switch based on concatenation of control signals
  2'd0 : out = i0;
  2'd1 : out = i1;
  2'd2 : out = i2;
  2'd3 : out = i3;
  default: $display("Invalid control signals");
endcase

// 一个 case 可以有多个
2'bx0, 2'bx1, 2'bxz, 2'bxx, 2'b0x, 2'b1x, 2'bzx : begin out0 = 1'bx; out1 = 1'bx; out2 = 1'bx; out3 = 1'bx; end
2'bz0, 2'bz1, 2'bzz, 2'b0z, 2'b1z : begin out0 = 1'bz; out1 = 1'bz; out2 = 1'bz; out3 = 1'bz; end
default: 

// casex, casez 没有本质区别, 随便选, 建议用 ? 表示不关心的位, 下面是有限编码器
casex (encoding) //logic value X represents a don't care bit
4'b1??? : next_state = 3;
4'b?1?? : next_state = 2;
4'b??1? : next_state = 1;
4'b???1 : next_state = 0;
default : next_state = 0;
endcase

// case 不一定要包含全部情况, 如果多个匹配, 取第一个, 如果没有匹配, 什么也不做, 组合逻辑必须要 full case, 即包含所有情况

